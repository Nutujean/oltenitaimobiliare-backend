// utils/smsLink.js
import axios from "axios";

const SMSLINK_BASE_URL =
  process.env.SMSLINK_BASE_URL?.trim() ||
  "https://secure.smslink.ro/sms/gateway/async_send.php";
const CONNECTION_ID = process.env.SMSLINK_CONNECTION_ID?.trim();
const PASSWORD = process.env.SMSLINK_PASSWORD?.trim();

// üîê Stocare temporarƒÉ OTP (√Æn memorie)
const otpStore = {};

/* =======================================================
   üì§ Trimite OTP rapid prin SMSLink (optimizat 07xxxxxxxx)
======================================================= */
export default async function sendOtpSMS(phone) {
  try {
    // CurƒÉ»õƒÉm numƒÉrul: pƒÉstrƒÉm doar cifre
    const cleanPhone = phone.replace(/[^\d]/g, "");

    // ‚úÖ SMSLink vrea exact 10 cifre, format 07xxxxxxxx
    let formatted = cleanPhone.startsWith("4") ? cleanPhone.slice(1) : cleanPhone;

    console.log("üìû NumƒÉr primit:", phone);
    console.log("üìû DupƒÉ curƒÉ»õare:", formatted);

    // ‚úÖ ValidƒÉm formatul ‚Äî trebuie sƒÉ fie 07xxxxxxxx
    if (!/^07\d{8}$/.test(formatted)) {
      console.error(`‚ùå NumƒÉr invalid pentru SMSLink: ${formatted}`);
      return {
        success: false,
        error: "NumƒÉr invalid (folose»ôte formatul 07xxxxxxxx)",
      };
    }

    // üî¢ GenerƒÉm OTP random
    const code = Math.floor(100000 + Math.random() * 900000).toString();
    otpStore[formatted] = code;

    console.log(`üì§ Trimitem OTP ${code} cƒÉtre ${formatted}`);

    // Construim URL-ul cƒÉtre SMSLink (folosim async_send pentru rapiditate)
    const params = new URLSearchParams({
      connection_id: CONNECTION_ID,
      password: PASSWORD,
      to: formatted,
      message: `Codul tƒÉu de autentificare Oltenita Imobiliare este ${code}. Nu divulga acest cod.`,
    });

    const url = `${SMSLINK_BASE_URL}?${params.toString()}`;
    console.log("üîó URL SMSLink:", url);

    // üîÅ Trimitem cererea cƒÉtre SMSLink
    let res = await axios.get(url, { timeout: 7000 });

    // DacƒÉ rƒÉspunsul con»õine eroare, √ÆncercƒÉm o singurƒÉ datƒÉ din nou
    if (!res.data || res.data.includes("ERROR")) {
      console.warn("‚ö†Ô∏è SMSLink a rƒÉspuns lent sau cu eroare, retry √Æn 1s...");
      await new Promise((r) => setTimeout(r, 1000));
      res = await axios.get(url, { timeout: 7000 });
    }

    if (res.data && res.data.includes("ERROR")) {
      console.error("‚ùå SMSLink ERROR:", res.data);
      return { success: false, error: res.data };
    }

    console.log("‚úÖ SMS trimis cu succes!");
    return { success: true };
  } catch (err) {
    console.error("‚ùå Eroare SMSLink:", err.message);
    return { success: false, error: err.message };
  }
}

/* =======================================================
   ‚úÖ Verificare OTP local
======================================================= */
export async function verifyOtpSMS(phone, code) {
  const cleanPhone = phone.replace(/[^\d]/g, "");
  const formatted = /^07\d{8}$/.test(cleanPhone)
    ? `4${cleanPhone}`
    : cleanPhone;

  const valid = otpStore[formatted] && otpStore[formatted] === code;
  if (valid) {
    delete otpStore[formatted];
    return { success: true };
  }
  return { success: false };
}

import express from "express";
import mongoose from "mongoose";
import Listing from "../models/Listing.js";
import auth from "../middleware/authMiddleware.js";

const router = express.Router();

/* =======================================================
   游릴 GET toate anun탵urile (public)
======================================================= */
router.get("/", async (req, res) => {
  try {
    const listings = await Listing.find()
      .sort({ createdAt: -1 })
      .lean();

    res.json(listings);
  } catch (e) {
    console.error("Eroare la GET /api/listings:", e);
    res.status(500).json({ error: "Eroare server la preluarea anun탵urilor" });
  }
});

/* =======================================================
   游릴 GET anun탵urile utilizatorului logat
======================================================= */
router.get("/my", auth, async (req, res) => {
  try {
    const myListings = await Listing.find({ user: req.user.id })
      .sort({ createdAt: -1 })
      .lean();

    res.json(myListings);
  } catch (e) {
    console.error("Eroare la GET /api/listings/my:", e);
    res.status(500).json({ error: "Eroare server la anun탵urile mele" });
  }
});

/* =======================================================
   游릴 GET un singur anun탵 (cu user populat)
======================================================= */
router.get("/:id", async (req, res) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ error: "ID anun탵 invalid" });
    }

    const listing = await Listing.findById(id)
      .populate("user", "_id name email") // 游댳 Popul캒m user-ul proprietar
      .lean();

    if (!listing) {
      return res.status(404).json({ error: "Anun탵 inexistent" });
    }

    res.json(listing);
  } catch (e) {
    console.error("Eroare la GET /api/listings/:id:", e);
    res.status(500).json({ error: "Eroare server la preluarea anun탵ului" });
  }
});

/* =======================================================
   游릴 POST - Adaug캒 un nou anun탵 (autentificat)
======================================================= */
router.post("/", auth, async (req, res) => {
  try {
    const {
      title,
      description,
      price,
      category,
      location,
      images,
      phone,
      dealType,
      surface,
      rooms,
      floor,
    } = req.body;

    if (!title || !price) {
      return res.status(400).json({ error: "Titlu 탳i pre탵 obligatorii" });
    }

    const newListing = new Listing({
      title,
      description,
      price,
      category,
      location,
      images: images || [],
      phone,
      dealType,
      surface,
      rooms,
      floor,
      user: req.user.id,
    });

    await newListing.save();
    res.status(201).json(newListing);
  } catch (e) {
    console.error("Eroare la POST /api/listings:", e);
    res.status(500).json({ error: "Eroare la ad캒ugarea anun탵ului" });
  }
});

/* =======================================================
   游릴 PUT - Editeaz캒 un anun탵 (doar proprietarul)
======================================================= */
router.put("/:id", auth, async (req, res) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ error: "ID anun탵 invalid" });
    }

    const listing = await Listing.findById(id);
    if (!listing) return res.status(404).json({ error: "Anun탵 inexistent" });

    if (String(listing.user) !== String(req.user.id)) {
      return res.status(403).json({ error: "Nu ai dreptul s캒 editezi acest anun탵" });
    }

    Object.assign(listing, req.body);
    await listing.save();

    res.json(listing);
  } catch (e) {
    console.error("Eroare la PUT /api/listings/:id:", e);
    res.status(500).json({ error: "Eroare la editarea anun탵ului" });
  }
});

/* =======================================================
   游릴 DELETE - 탲terge un anun탵 (doar proprietarul)
======================================================= */
router.delete("/:id", auth, async (req, res) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ error: "ID anun탵 invalid" });
    }

    const listing = await Listing.findById(id);
    if (!listing) return res.status(404).json({ error: "Anun탵 inexistent" });

    if (String(listing.user) !== String(req.user.id)) {
      return res.status(403).json({ error: "Nu ai dreptul s캒 탳tergi acest anun탵" });
    }

    await listing.deleteOne();
    res.json({ ok: true, message: "Anun탵 탳ters cu succes" });
  } catch (e) {
    console.error("Eroare la DELETE /api/listings/:id:", e);
    res.status(500).json({ error: "Eroare la 탳tergerea anun탵ului" });
  }
});

export default router;
